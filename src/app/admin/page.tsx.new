"use client";

import { useState, ChangeEvent, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { Button } from "@/components/Button";
import useProducts, { Product } from '@/hooks/useProducts';

interface ConfirmDelete {
  show: boolean;
  productId: number | null;
}

const initialProductState: Product = {
  product: '',
  quantity: 0,
  unitPrice: 0,
  unitExpense: '',
  startDate: '',
  endDate: '',
  total: 0,
  id: 0,
  type: 'product',
  status: 'active',
  soldTickets: 0,
  currentAmount: 0,
  totalTickets: 0,
  imageUrl: '',
  prizeImageUrl: ''
};

const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB

export default function AdminPanel() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const { products, saveProducts, validateProduct } = useProducts();
  const [newProduct, setNewProduct] = useState<Product>(initialProductState);
  const [showConfirmDelete, setShowConfirmDelete] = useState<ConfirmDelete>({ show: false, productId: null });
  const [selectedType, setSelectedType] = useState<'product' | 'raffle'>('product');
  const [error, setError] = useState<string | null>(null);
  const [editProduct, setEditProduct] = useState<Product | null>(null);

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/login');
    }
  }, [status, router]);

  if (status === 'loading') {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p>Carregando...</p>
      </div>
    );
  }

  if (!session) {
    return null;
  }

  const formatCurrency = (value: number | string): string => {
    if (typeof value === 'string') {
      value = parseFloat(value.replace(/[^\d,-]/g, '').replace(',', '.'));
    }
    return `R$ ${value.toFixed(2).replace('.', ',')}`;
  };

  const parseCurrency = (value: string): number => {
    return parseFloat(value.replace(/[^\d,-]/g, '').replace(',', '.')) || 0;
  };

  const handleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setError(null);

    if (name === 'type') {
      setSelectedType(value as 'product' | 'raffle');
      setNewProduct(prev => ({
        ...prev,
        type: value as 'product' | 'raffle',
        quantity: value === 'product' ? prev.quantity : 0,
        totalTickets: value === 'raffle' ? prev.totalTickets : 0
      }));
    } else if (name === 'unitPrice' || name === 'unitExpense') {
      const numericValue = parseCurrency(value);
      setNewProduct(prev => ({ ...prev, [name]: numericValue }));
    } else {
      setNewProduct(prev => ({ ...prev, [name]: value }));
    }
  };

  const calculateTotal = (quantity: number, unitPrice: number): number => {
    return quantity * unitPrice;
  };

  const handleAddProduct = () => {
    try {
      validateProduct(newProduct);

      const unitPrice = Number(newProduct.unitPrice.toString().replace(',', '.')) || 0;
      const quantity = selectedType === 'product' ? Number(newProduct.quantity) : (newProduct.totalTickets || 0);
      const total = calculateTotal(quantity, unitPrice);

      const newProductData = {
        ...newProduct,
        id: products.length + 1,
        total,
        type: selectedType,
        status: 'active' as const,
        soldTickets: 0,
        currentAmount: 0,
        totalTickets: selectedType === 'raffle' ? newProduct.totalTickets : undefined
      };

      const updatedProducts = [...products, newProductData];
      saveProducts(updatedProducts);
      setNewProduct(initialProductState);
      setError(null);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Erro ao adicionar produto');
    }
  };

  const handleDeleteProduct = (productId: number) => {
    try {
      const updatedProducts = products.filter((item) => item.id !== productId);
      saveProducts(updatedProducts);
      setShowConfirmDelete({ show: false, productId: null });
    } catch (error) {
      setError('Erro ao excluir produto');
    }
  };

  const validateImageFile = (file: File): void => {
    if (file.size > MAX_FILE_SIZE) {
      throw new Error('A imagem deve ter no máximo 5MB');
    }
    if (!file.type.startsWith('image/')) {
      throw new Error('O arquivo deve ser uma imagem');
    }
  };

  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>, isPrizeImage: boolean = false) => {
    try {
      const file = e.target.files?.[0];
      if (!file) return;

      validateImageFile(file);
      const imageUrl = URL.createObjectURL(file);

      if (isPrizeImage) {
        setNewProduct(prev => ({ ...prev, prizeImageUrl: imageUrl }));
      } else {
        setNewProduct(prev => ({ ...prev, imageUrl }));
      }
      setError(null);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Erro ao fazer upload da imagem');
    }
  };

  const handleEditProduct = (product: Product) => {
    setEditProduct(product);
    setError(null);
  };

  const handleSaveEdit = () => {
    try {
      if (!editProduct) return;
      validateProduct(editProduct);
      const updatedProducts = products.map((item) =>
        item.id === editProduct.id
          ? { ...editProduct, total: calculateTotal(editProduct.quantity, editProduct.unitPrice) }
          : item
      );
      saveProducts(updatedProducts);
      setEditProduct(null);
      setError(null);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Erro ao salvar edição');
    }
  };

  const handleEditImageUpload = async (e: React.ChangeEvent<HTMLInputElement>, isPrizeImage: boolean = false) => {
    try {
      const file = e.target.files?.[0];
      if (!file || !editProduct) return;

      validateImageFile(file);
      const imageUrl = URL.createObjectURL(file);

      if (isPrizeImage) {
        setEditProduct(prev => prev ? { ...prev, prizeImageUrl: imageUrl } : null);
      } else {
        setEditProduct(prev => prev ? { ...prev, imageUrl } : null);
      }
      setError(null);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Erro ao fazer upload da imagem');
    }
  };

  return (
    <main className="w-full min-h-screen p-6 bg-gradient-to-r from-[var(--background)] to-[var(--background-light)] flex flex-col items-center">
      <div className="flex justify-between items-center mb-6 w-full max-w-6xl">
        <Button
          onClick={() => router.back()}
          className="btn btn-primary"
        >
          Voltar
        </Button>
        <h1 className="text-2xl font-bold">Painel Administrativo</h1>
      </div>

      {/* Container centralizado dos blocos */}
      <div className="flex justify-center items-start gap-12 w-full max-w-5xl mx-auto">
        {/* Formulário de Adicionar Item */}
        <div className="card max-w-md w-[400px]">
          <h2 className="text-xl font-semibold mb-4">Adicionar Novo Item</h2>
          {error && (
            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
              {error}
            </div>
          )}
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Tipo</label>
              <select
                name="type"
                value={selectedType}
                onChange={handleInputChange}
                className="input mt-1"
              >
                <option value="product">Produto</option>
                <option value="raffle">Rifa</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Nome do Item</label>
              <input
                type="text"
                name="product"
                value={newProduct.product}
                onChange={handleInputChange}
                className="input mt-1"
              />
            </div>
            {selectedType === 'product' ? (
              <div>
                <label className="block text-sm font-medium text-gray-700">Quantidade</label>
                <input
                  type="number"
                  name="quantity"
                  value={newProduct.quantity}
                  onChange={handleInputChange}
                  className="input mt-1"
                />
              </div>
            ) : (
              <div>
                <label className="block text-sm font-medium text-gray-700">Total de Bilhetes</label>
                <input
                  type="number"
                  name="totalTickets"
                  value={newProduct.totalTickets}
                  onChange={handleInputChange}
                  className="input mt-1"
                />
              </div>
            )}
            <div>
              <label className="block text-sm font-medium text-gray-700">Preço Unitário</label>
              <input
                type="text"
                name="unitPrice"
                value={newProduct.unitPrice}
                onChange={handleInputChange}
                className="input mt-1"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Despesa Unitária</label>
              <input
                type="text"
                name="unitExpense"
                value={newProduct.unitExpense || ''}
                onChange={handleInputChange}
                className="input mt-1"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Data de Início</label>
              <input
                type="date"
                name="startDate"
                value={newProduct.startDate || ''}
                onChange={handleInputChange}
                className="input mt-1"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Data de Término</label>
              <input
                type="date"
                name="endDate"
                value={newProduct.endDate || ''}
                onChange={handleInputChange}
                className="input mt-1"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Imagem do Item</label>
              <input
                type="file"
                accept="image/*"
                onChange={(e) => handleImageUpload(e, false)}
                className="input mt-1"
              />
            </div>
            {selectedType === 'raffle' && (
              <div>
                <label className="block text-sm font-medium text-gray-700">Imagem do Prêmio</label>
                <input
                  type="file"
                  accept="image/*"
                  onChange={(e) => handleImageUpload(e, true)}
                  className="input mt-1"
                />
              </div>
            )}
            <Button
              onClick={handleAddProduct}
              className="btn btn-primary w-full"
            >
              Adicionar Item
            </Button>
          </div>
        </div>

        {/* Lista de Itens */}
        <div className="card flex-1">
          <h2 className="text-xl font-semibold mb-4">Lista de Itens</h2>
          <div className="space-y-4">
            {products.map((item) => (
              <div key={item.id} className="p-4 border border-[var(--border)] rounded-lg">
                <div className="flex items-start space-x-4">
                  {item.imageUrl ? (
                    <img
                      src={item.imageUrl}
                      alt={item.product}
                      className="w-24 h-24 object-cover rounded-lg"
                    />
                  ) : (
                    <div className="w-24 h-24 bg-gray-100 rounded-lg flex items-center justify-center text-2xl">
                      {item.type === 'product' ? '🛍️' : '🎟️'}
                    </div>
                  )}
                  <div className="flex-1">
                    <h3 className="font-semibold text-[var(--foreground)]">{item.product}</h3>
                    <p className="text-[var(--foreground)]">
                      {item.type === 'product' ? 'Quantidade:' : 'Total de Bilhetes:'} {item.type === 'product' ? item.quantity : item.totalTickets}
                    </p>
                    <p className="text-[var(--foreground)]">Preço Unitário: {formatCurrency(item.unitPrice)}</p>
                    <p className="text-[var(--foreground)]">Total: {formatCurrency(item.total)}</p>
                    <div className="mt-2 flex space-x-2">
                      <Button
                        onClick={() => handleEditProduct(item)}
                        className="btn btn-secondary"
                      >
                        Editar
                      </Button>
                      <Button
                        onClick={() => setShowConfirmDelete({ show: true, productId: item.id })}
                        className="btn btn-danger"
                      >
                        Excluir
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Modal de Confirmação de Exclusão */}
      {showConfirmDelete.show && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-white p-6 rounded-lg">
            <h3 className="text-lg font-semibold mb-4">Confirmar Exclusão</h3>
            <p className="mb-4">Tem certeza que deseja excluir este item?</p>
            <div className="flex justify-end space-x-2">
              <Button
                onClick={() => setShowConfirmDelete({ show: false, productId: null })}
                className="btn btn-secondary"
              >
                Cancelar
              </Button>
              <Button
                onClick={() => handleDeleteProduct(showConfirmDelete.productId!)}
                className="btn btn-danger"
              >
                Excluir
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Edição */}
      {editProduct && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-[100] animate-fadeIn">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto transform transition-all duration-300 ease-in-out shadow-xl animate-slideIn">
            <div className="flex justify-between items-center mb-4 border-b pb-4">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                Editar {editProduct.type === 'product' ? 'Produto' : 'Rifa'}
              </h3>
              <button
                onClick={() => setEditProduct(null)}
                className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Nome do Item</label>
                <input
                  type="text"
                  value={editProduct.product}
                  onChange={(e) => setEditProduct({ ...editProduct, product: e.target.value })}
                  className="input mt-1 w-full bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Quantidade</label>
                <input
                  type="number"
                  value={editProduct.quantity}
                  onChange={(e) => setEditProduct({ ...editProduct, quantity: Number(e.target.value) })}
                  className="input mt-1 w-full bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Preço Unitário</label>
                <input
                  type="text"
                  value={editProduct.unitPrice}
                  onChange={(e) => setEditProduct({ ...editProduct, unitPrice: parseCurrency(e.target.value) })}
                  className="input mt-1 w-full bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Despesa Unitária</label>
                <input
                  type="text"
                  value={editProduct.unitExpense || ''}
                  onChange={(e) => setEditProduct({ ...editProduct, unitExpense: e.target.value })}
                  className="input mt-1 w-full bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Data de Início</label>
                <input
                  type="date"
                  value={editProduct.startDate || ''}
                  onChange={(e) => setEditProduct({ ...editProduct, startDate: e.target.value })}
                  className="input mt-1 w-full bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Data de Término</label>
                <input
                  type="date"
                  value={editProduct.endDate || ''}
                  onChange={(e) => setEditProduct({ ...editProduct, endDate: e.target.value })}
                  className="input mt-1 w-full bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600"
                />
              </div>
              {editProduct.type === 'product' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Imagem do Item</label>
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => handleEditImageUpload(e, false)}
                    className="input mt-1 w-full bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600"
                  />
                </div>
              )}
              {editProduct.type === 'raffle' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Imagem do Prêmio</label>
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => handleEditImageUpload(e, true)}
                    className="input mt-1 w-full bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600"
                  />
                </div>
              )}
              <div className="flex justify-end space-x-2 mt-6 pt-4 border-t">
                <Button
                  onClick={() => setEditProduct(null)}
                  className="btn btn-secondary"
                >
                  Cancelar
                </Button>
                <Button
                  onClick={handleSaveEdit}
                  className="btn btn-primary"
                >
                  Salvar
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </main>
  );
} 